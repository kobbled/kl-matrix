PROGRAM class_name
%NOBUSYLAMP
%COMMENT = '2d abstraction'
%NOLOCKGROUP
%UNINITVARS

%include namespace.m

-- declare type
%include define_type.m

t_arr2d_ref(t_rows,t_columns,type_name,inner_type)

%include errors.klt
%include matrix.klt

-- VARS
%ifdef UNIT_TESTING
VAR
  error_msg : STRING[254]
%endif


%from math.klh %import srand, rand, rand_int
%from strings.klh %import r_to_s, i_to_s, s_to_arr, s_to_iarr, s_to_rarr
%include errors.klh
%include kunit.klh

%include 2dArray.klh -- class.klh
%include 2dArray.private.klh

--set functions to handle inner type of the matrix
--can only be an integer or real
%ifeq inner_type INTEGER
%define type_convert_f i_to_s
%define string_convert_f s_to_iarr
%else 
%ifeq inner_type REAL
%define type_convert_f r_to_s
%define string_convert_f s_to_rarr
%else
%error 'inner_type cannot be used for matrix operations'
%endif
%endif

--creation methods

ROUTINE create_array_from_string
  VAR
    out_arr : arry(type_name)
    subrow : arrx(type_name)
%defeval row_length %eval t_columns*8
    row_str : ARRAY[t_rows] OF STRING[row_length]
    row : ARRAY[t_columns] OF inner_type
    i, j : INTEGER
  BEGIN
    -- split row delimiter
    s_to_arr(sarr, row_delim, row_str)

    FOR i=1 TO ARRAY_LEN(row_str) DO
      IF NOT UNINIT(row_str[i]) THEN
%ifeq inner_type INTEGER
        s_to_iarr(row_str[i], col_delim, row)
%endif
%ifeq inner_type REAL
        s_to_rarr(row_str[i], col_delim, row)
%endif
        FOR j=1 TO ARRAY_LEN(subrow) DO
          IF NOT UNINIT(row[j]) THEN
            subrow[j] = row[j]
          ENDIF
        ENDFOR
        out_arr[i] = subrow
      ENDIF
    ENDFOR

    RETURN(out_arr)
  END create_array_from_string

ROUTINE create_row_from_string
  VAR
    erow : arrx(type_name)
    row : ARRAY[t_columns] OF inner_type
    i, j : INTEGER
  BEGIN
%ifeq inner_type INTEGER
    s_to_iarr(sarr, col_delim, row)
%endif
%ifeq inner_type REAL
    s_to_rarr(sarr, col_delim, row)
%endif
%ifeq inner_type STRING
    s_to_arr(sarr, col_delim, row)
%endif
    i=1
    FOR i=1 TO ARRAY_LEN(erow) DO
      erow[i] = row[i]
    ENDFOR

    RETURN(erow)
  END create_row_from_string

ROUTINE clear
  VAR
    uninitr : inner_type
    subrow : arrx(type_name)
    i, j : INTEGER
  BEGIN
    FOR i=1 TO t_rows DO
      FOR j=1 TO t_columns DO
        subrow[j] = uninitr
      ENDFOR
      arr[i] = subrow
    ENDFOR
  END clear

--setters
ROUTINE set_row
  BEGIN
    IF row_idx > ARRAY_LEN(out_arr) THEN karelError(INVALID_INDEX, 'requested row does not exist', ER_ABORT) ; ENDIF

    out_arr[row_idx] = row
  END set_row

ROUTINE set_from_array
    VAR
    i, j : INTEGER
    subrow : arrx(type_name)
  BEGIN
    IF ARRAY_LEN(in_arr) <> ARRAY_LEN(out_arr) THEN
      karelError(ARR_LEN_MISMATCH, 'class name and array are not the same size', ER_ABORT)
    ENDIF

    FOR i=1 TO t_rows DO
      FOR j=1 TO t_columns DO
        subrow[j] = in_arr[i,j]
      ENDFOR
      out_arr[i] = subrow
    ENDFOR
  END set_from_array

ROUTINE set_row_from_array
  VAR
    subrow : arrx(type_name)
    i : INTEGER
  BEGIN
    IF ARRAY_LEN(in_row) <> t_columns THEN
      karelError(ARR_LEN_MISMATCH, 'class name and array rows are not the same size', ER_ABORT)
    ENDIF
    
    IF row_idx > t_rows THEN karelError(INVALID_INDEX, 'requested row does not exist', ER_ABORT) ; ENDIF
    
    FOR i=1 TO t_columns DO
      subrow[i] = in_row[i]
    ENDFOR

    out_arr[row_idx] = subrow

  END set_row_from_array

--conversions
ROUTINE convert_to_array
  VAR
    subrow : arrx(type_name)
    i, j : INTEGER
  BEGIN
    IF ARRAY_LEN(out_arr) <> t_rows THEN
      karelError(ARR_LEN_MISMATCH, 'rows on array do not match for conversion', ER_ABORT)
    ENDIF
    IF ARRAY_LEN(out_arr) <> t_columns THEN
      karelError(ARR_LEN_MISMATCH, 'columns on array do not match for conversion', ER_ABORT)
    ENDIF

    FOR i=1 TO t_rows DO
      subrow = in_arr[i]
      FOR j=1 TO t_columns DO
        out_arr[i,j] = subrow[j]
      ENDFOR
    ENDFOR
  END convert_to_array

-- initializations
ROUTINE full
  BEGIN
    init_ (OP_FULL, number, out_arr)
  END full

ROUTINE zeros
  BEGIN
    init_ (OP_ZEROS, 0, out_arr)
  END zeros

ROUTINE ones
  BEGIN
    init_ (OP_ONES, 0, out_arr)
  END ones

ROUTINE eye
  BEGIN
    init_ (OP_EYE, 0, out_arr)
  END eye

ROUTINE random
  BEGIN
    init_ (OP_RANDOM, 0, out_arr)
  END random

--operations

ROUTINE add
  VAR
    out_arr : arry(type_name)
  BEGIN
    operations_(OP_ADD, arr1, arr2, 0, out_arr)
    RETURN(out_arr)
  END add

ROUTINE subtract
  VAR
    out_arr : arry(type_name)
  BEGIN
    operations_(OP_SUBTRACT, arr1, arr2, 0, out_arr)
    RETURN(out_arr)
  END subtract

ROUTINE smult
  VAR
    dummy : arry(type_name)
    out_arr : arry(type_name) 
  BEGIN
    operations_(OP_SMULT, arr, dummy, val, out_arr)
    RETURN(out_arr)
  END smult

-- only works for square matrices
%ifeq t_rows t_columns

ROUTINE mult
  VAR
    out_arr : arry(type_name)
    trans : arry(type_name)
    row1  : arrx(type_name)
    row2  : arrx(type_name)
    d : REAL
    i, j : INTEGER
  BEGIN
    transpose_(arr2, trans)

    FOR i=1 TO t_rows DO
      row1 = arr1[i]
      FOR j=1 TO t_columns DO
        row2 = trans[j]
        out_arr[i,j] = dot_(row1, row2)
      ENDFOR
    ENDFOR
  END mult

ROUTINE transpose
  VAR
    trans : arry(type_name)
  BEGIN
    transpose_(arr, trans)
    RETURN(trans)
  END transpose

ROUTINE trace
  VAR
    sum : inner_type
    i : INTEGER
  BEGIN

    sum = 0
    FOR i=1 TO ARRAY_LEN(arr) DO
      sum = sum + arr[i,i]
    ENDFOR

    RETURN(sum)
  END trace

%endif

-- private
ROUTINE init_
  VAR
    subrow : arrx(type_name)
    rrand : inner_type
    tme  : INTEGER
    i, j : INTEGER
  BEGIN
    FOR i=1 TO t_rows DO
      FOR j=1 TO t_columns DO
        SELECT operation OF
          CASE (OP_ZEROS) :
            subrow[j] = 0
          CASE (OP_EYE) :
            IF (i=j) THEN
              subrow[j] = 1
            ELSE
              subrow[j] = 0
            ENDIF
          CASE (OP_FULL) :
            subrow[j] = default_val
          CASE (OP_RANDOM) :
            GET_TIME(tme)
            math__srand(tme*i*j)
%ifeq inner_type INTEGER
            rrand = math__rand_int
%else 
%ifeq inner_type REAL
            rrand = math__rand
%else
%error 'inner_type cannot be used for matrix operations'
%endif
%endif
            subrow[j] = rrand
          CASE (OP_ONES) :
            subrow[j] = 1
          ELSE :
              karelError(INVALID_INDEX, ' class_name_init_: Invalid operator selected', ER_ABORT)
        ENDSELECT
      ENDFOR

      --return out
      out_arr[i] = subrow

    ENDFOR
  END init_

ROUTINE operations_
  VAR
    row1  : arrx(type_name)
    row2  : arrx(type_name)
    subrow : arrx(type_name)
    i, j : INTEGER
  BEGIN
    FOR i=1 TO t_rows DO
      row1 = arr1[i]
      row2 = arr2[i]
      FOR j=1 TO t_columns DO
          SELECT operation OF
            CASE (OP_ADD) :
              IF UNINIT(row1[j]) THEN subrow[j] = row2[j]; ENDIF
              IF UNINIT(row2[j]) THEN subrow[j] = row1[j]; ENDIF
              IF NOT (UNINIT(row1[j]) AND UNINIT(row2[j])) THEN
                subrow[j] = row1[j] + row2[j]
              ENDIF
            CASE (OP_SUBTRACT) :
              IF UNINIT(row1[j]) THEN subrow[j] = row2[j]; ENDIF
              IF UNINIT(row2[j]) THEN subrow[j] = row1[j]; ENDIF
              IF NOT (UNINIT(row1[j]) AND UNINIT(row2[j])) THEN
                subrow[j] = row1[j] - row2[j]
              ENDIF
            CASE (OP_SMULT) :
              IF NOT (UNINIT(row1[j])) THEN
                subrow[j] = scalar*row1[j]
              ENDIF
          ENDSELECT
      ENDFOR

      --return out
      out_arr[i] = subrow

    ENDFOR
  END operations_

ROUTINE dot_
  VAR
    i : INTEGER
    out : inner_type
  BEGIN
    out = 0
    FOR i=1 TO ARRAY_LEN(row1) DO
      out = out + row1[i]*row2[i]
    ENDFOR

    RETURN(out)
  END dot_

-- only works for square matrices
%ifeq t_rows t_columns

ROUTINE transpose_
  VAR
    row   : arrx(type_name)
    trans : arry(type_name)
    i, j : INTEGER
    temp : arrx(type_name)
  BEGIN
    FOR i=1 TO t_columns DO
      FOR j=1 TO t_rows DO
        temp = arr[j]
        IF (NOT UNINIT(temp[i])) THEN
          row[j] = arr[j,i]
        ENDIF
      ENDFOR

      IF (NOT UNINIT(temp[i])) THEN
        out_arr[i] = row
      ENDIF
    ENDFOR

  END transpose_

  VAR
  BEGIN
    ENDFOR

%endif

-- testing routines
%ifdef UNIT_TESTING

ROUTINE test_row
  VAR
%define EPSILON 0.005
    n, i : INTEGER
    ok : BOOLEAN
    assrtn_count : INTEGER
    ent, status : INTEGER
  BEGIN
    ok = TRUE

    GET_VAR(ent, 'kunit', 'assrtn_count', assrtn_count, status)
    assrtn_count = assrtn_count + 1
    SET_VAR(ent, 'kunit', 'assrtn_count', assrtn_count, status)

    --actual test array should be equal to or greater than expected
    -- loop through arrays and check values
    FOR n = 1 TO ARRAY_LEN(actual) DO
      -- disregard comparision if item is outside of expected
      -- shape
      IF (n <= ARRAY_LEN(expected)) THEN
        -- handle uninitialized
        IF NOT (UNINIT(actual[n]) AND UNINIT(expected[n])) THEN
          IF UNINIT(actual[n]) THEN
            error_msg = 'Expected ' + type_convert_f(expected[n]) + ' but got UNINIT'
            RETURN(false)
          ENDIF

          IF ABS(expected[n] - actual[n]) > EPSILON THEN
            ok = FALSE
            GO TO skiploop
          ENDIF
        ENDIF
      ENDIF
    ENDFOR

    skiploop::

    IF ok THEN
      RETURN(true)
    ELSE
      error_msg = error_msg + 'Expected ' + type_convert_f(expected[n]) + ' but got ' + type_convert_f(actual[n]) + &
                  ', on index ' + i_to_s(i) + ' of array.'
      RETURN(false)
    ENDIF
  END test_row

ROUTINE testing
  VAR
    actual_row : arrx(type_name)
    expect_row : arrx(type_name)
    b : BOOLEAN
    i, ent, status : INTEGER
  BEGIN
    error_msg = ''

    IF ARRAY_LEN(expected) > ARRAY_LEN(actual) THEN
      error_msg = error_msg + 'rows are not the same size'
      SET_VAR(ent, 'kunit', 'error_msg', error_msg, status)
      CHK_STAT(status)
      RETURN(false)
    ENDIF

    i=1
    FOR i=1 TO ARRAY_LEN(actual) DO
      actual_row = actual[i]
      expect_row = expected[i]  

      b = test_row(expect_row, actual_row)
      IF b = FALSE THEN
        error_msg = error_msg + 'Row ' + i_to_s(i) + ' is not equal.'
        SET_VAR(ent, 'kunit', 'error_msg', error_msg, status)
        CHK_STAT(status)
        RETURN(false)
      ENDIF
    ENDFOR

    RETURN(true)
  END testing

%endif UNIT_TESTING

BEGIN
END class_name