PROGRAM class_name
%NOBUSYLAMP
%COMMENT = '2d abstraction'
%NOLOCKGROUP
%UNINITVARS

%include namespace.m

-- declare type
%include define_type.m

t_arr2d_ref(t_rows,t_columns,type_name,inner_type)

--declare object member variables
VAR
  this      : arry(type_name)
  this_row  : arrx(type_name)
  i, j : INTEGER

%include errors.klt
%include matrix.klt

ROUTINE init_(operation : INTEGER; value : inner_type) FROM class_name
ROUTINE operations_(operation : INTEGER; arr2  : arry(type_name)) FROM class_name

%include 2dArray.klh -- class.klh

%from math.klh %import srand, rand, rand_int
%from strings.klh %import r_to_s, i_to_s, s_to_arr, s_to_iarr, s_to_rarr
%include errors.klh
%include kunit.klh

--set functions to handle inner type of the matrix
--can only be an integer or real
%ifeq inner_type INTEGER
%define type_convert_f i_to_s
%define string_convert_f s_to_iarr
%else 
%ifeq inner_type REAL
%define type_convert_f r_to_s
%define string_convert_f s_to_rarr
%else
%error 'inner_type cannot be used for matrix operations'
%endif
%endif

ROUTINE constructor
  VAR
%defeval row_length %eval t_columns*8
    row_str : ARRAY[t_rows] OF STRING[row_length]
    row : ARRAY[t_columns] OF inner_type
  BEGIN
    i=1 ; j=1 ;
    -- split row delimiter
    s_to_arr(sarr, row_delim, row_str)

    FOR i=1 TO ARRAY_LEN(row_str) DO
%ifeq inner_type INTEGER
      s_to_iarr(row_str[i], col_delim, row)
%endif
%ifeq inner_type REAL
      s_to_rarr(row_str[i], col_delim, row)
%endif
      FOR j=1 TO ARRAY_LEN(this_row) DO
        this_row[j] = row[j]
      ENDFOR
      this[i] = this_row 
    ENDFOR
  END constructor

ROUTINE create_row
  VAR
    erow : arrx(type_name)
    row : ARRAY[t_columns] OF inner_type
  BEGIN
%ifeq inner_type INTEGER
    s_to_iarr(sarr, col_delim, row)
%endif
%ifeq inner_type REAL
    s_to_rarr(sarr, col_delim, row)
%endif
    i=1
    FOR i=1 TO ARRAY_LEN(erow) DO
      erow[i] = row[i]
    ENDFOR

    RETURN(erow)
  END create_row

ROUTINE desctructor
  VAR
    uninitr : inner_type
  BEGIN
    i=1 ; j=1 ;
    FOR i=1 TO ARRAY_LEN(this) DO
      FOR j=1 TO ARRAY_LEN(this_row) DO
        this_row[j] = uninitr
      ENDFOR
      this[i] = this_row 
    ENDFOR
  END desctructor

--getters
ROUTINE get_matrix
  BEGIN
    RETURN(this)
  END get_matrix

--setters
ROUTINE set_matrix
  BEGIN
    this = arr
  END set_matrix

ROUTINE set_row
  BEGIN
    IF row_idx > ARRAY_LEN(this) THEN karelError(INVALID_INDEX, 'requested row does not exist', ER_ABORT) ; ENDIF

    this[row_idx] = row
  END set_row

ROUTINE set_from_array
  BEGIN
    IF ARRAY_LEN(arr) <> ARRAY_LEN(this) THEN
      karelError(ARR_LEN_MISMATCH, 'class name and array are not the same size', ER_ABORT)
    ENDIF

    i=1 ; j=1 ;
    FOR i=1 TO ARRAY_LEN(this) DO
      FOR j=1 TO ARRAY_LEN(this_row) DO
        this_row[j] = arr[i,j]
      ENDFOR
      this[i] = this_row
    ENDFOR
  END set_from_array

ROUTINE set_row_from_array
  BEGIN
    IF ARRAY_LEN(row) <> ARRAY_LEN(this_row) THEN
      karelError(ARR_LEN_MISMATCH, 'class name and array rows are not the same size', ER_ABORT)
    ENDIF
    
    IF row_idx > ARRAY_LEN(this) THEN karelError(INVALID_INDEX, 'requested row does not exist', ER_ABORT) ; ENDIF
    
    i=1 ;
    FOR i=1 TO ARRAY_LEN(this_row) DO
      this_row[i] = row[i]
    ENDFOR
    this[row_idx] = this_row
  END set_row_from_array

--conversions
ROUTINE convert_to_array
  BEGIN
    IF ARRAY_LEN(arr) <> ARRAY_LEN(this) THEN
      karelError(ARR_LEN_MISMATCH, 'class name and array are not the same size', ER_ABORT)
    ENDIF

    i=1 ; j=1 ;
    FOR i=1 TO ARRAY_LEN(this) DO
      this_row = this[i]
      FOR j=1 TO ARRAY_LEN(this_row) DO
        arr[i,j] = this_row[j]
      ENDFOR
    ENDFOR
  END convert_to_array

-- initializations
ROUTINE full
  BEGIN
    init_ (OP_FULL, number)
  END full

ROUTINE zeros
  BEGIN
    init_ (OP_ZEROS,0)
  END zeros

ROUTINE ones
  BEGIN
    init_ (OP_ONES, 0)
  END ones

ROUTINE random
  BEGIN
    init_ (OP_RANDOM, 0)
  END random

--operations
ROUTINE add
  BEGIN
    operations_ (OP_ADD, arr2)
  END add

ROUTINE subtract
  BEGIN
    operations_ (OP_SUBTRACT, arr2)
  END subtract

-- private
ROUTINE init_
  VAR
    tme  : INTEGER
    rrand : inner_type
  BEGIN
    i=1 ; j=1 ;
    FOR i=1 TO ARRAY_LEN(this) DO
      FOR j=1 TO ARRAY_LEN(this_row) DO
        SELECT operation OF
          CASE (OP_ZEROS) :
            this_row[j] = 0
          CASE (OP_EYE) :
            IF (i=j) THEN
              this_row[j] = 1
            ELSE
              this_row[j] = 0
            ENDIF
          CASE (OP_FULL) :
            this_row[j] = value
          CASE (OP_RANDOM) :
            GET_TIME(tme)
            math__srand(tme*i*j)
%ifeq inner_type INTEGER
            rrand = math__rand_int
%else 
%ifeq inner_type REAL
            rrand = math__rand
%else
%error 'inner_type cannot be used for matrix operations'
%endif
%endif
            this_row[j] = rrand
          CASE (OP_ONES) :
            this_row[j] = 1
          ELSE :
              karelError(INVALID_INDEX, ' class_name_init_: Invalid operator selected', ER_ABORT)
        ENDSELECT
      ENDFOR
      this[i] = this_row
    ENDFOR
  END init_

ROUTINE operations_
  VAR
    row2  : arrx(type_name)
  BEGIN
    i=1 ; j=1 ;
    FOR i=1 TO ARRAY_LEN(this) DO
      this_row = this[i]
      row2 = arr2[i]
      FOR j=1 TO ARRAY_LEN(this_row) DO
        IF NOT (UNINIT(this_row[j]) AND UNINIT(row2[j])) THEN
          SELECT operation OF
            CASE (OP_ADD) :
              this_row[j] = this_row[j] + row2[j]
            CASE (OP_SUBTRACT) :
              this_row[j] = this_row[j] - row2[j]
          ENDSELECT
        ENDIF
      ENDFOR
      this[i] = this_row
    ENDFOR
  END operations_

-- testing routines
%ifdef UNIT_TESTING

ROUTINE test_row
  VAR
    n : INTEGER
    ok : BOOLEAN
    assrtn_count : INTEGER
    error_msg : STRING[254]
    ent, status : INTEGER
  BEGIN
    ok = TRUE

    GET_VAR(ent, 'kunit', 'assrtn_count', assrtn_count, status)
    assrtn_count = assrtn_count + 1
    SET_VAR(ent, 'kunit', 'assrtn_count', assrtn_count, status)

    --actual test array should be equal to or greater than expected
    -- loop through arrays and check values
    FOR n = 1 TO ARRAY_LEN(actual) DO
      -- disregard comparision if item is outside of expected
      -- shape
      IF (n <= ARRAY_LEN(expected)) THEN
        -- handle uninitialized
        IF UNINIT(actual[n]) THEN
          error_msg = 'Expected ' + type_convert_f(expected[n]) + ' but got UNINIT'
          RETURN(false)
        ENDIF

        IF expected[n] <> actual[n] THEN
          ok = FALSE
          GO TO skiploop
        ENDIF

      ENDIF
    ENDFOR

    skiploop::

    IF ok THEN
      RETURN(true)
    ELSE
      error_msg = 'Expected ' + type_convert_f(expected[n]) + ' but got ' + type_convert_f(actual[n]) + &
                  ', on index ' + i_to_s(i) + ' of array.'
      RETURN(false)
    ENDIF
  END test_row

ROUTINE testing
  VAR
    expect_row : arrx(type_name)
    b : BOOLEAN
    error_msg : STRING[254]
    ent, status : INTEGER
  BEGIN
    IF ARRAY_LEN(expected) > ARRAY_LEN(this) THEN
      error_msg = 'rows are not the same size'
      SET_VAR(ent, 'kunit', 'error_msg', error_msg, status)
      CHK_STAT(status)
      RETURN(false)
    ENDIF

    i=1
    FOR i=1 TO ARRAY_LEN(this) DO
      this_row = this[i]
      expect_row = expected[i]  

      b = test_row(expect_row, this_row)
      IF b = FALSE THEN
        error_msg = 'Row ' + i_to_s(i) + 'is not equal.'
        SET_VAR(ent, 'kunit', 'error_msg', error_msg, status)
        CHK_STAT(status)
        RETURN(false)
      ENDIF
    ENDFOR

    RETURN(true)
  END testing

%endif UNIT_TESTING

BEGIN
END class_name