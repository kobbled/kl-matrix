--header
%include header_guard.m
--oop
%include oop.m

--start header file
header_if -- ifndef class
header_def -- define class

-- Declare functions
-- ***************
  -- public
ROUTINE funcname(init) (value : REAL) FROM class_name
ROUTINE funcname(dsct)  FROM class_name
ROUTINE funcname(full) (number : REAL) FROM class_name
ROUTINE funcname(zero) FROM class_name
ROUTINE funcname(ones)  FROM class_name
ROUTINE funcname(rand)  FROM class_name
ROUTINE funcname(eye)  FROM class_name
-- private
ROUTINE funcname(cnst) (operation : INTEGER; value : REAL) FROM class_name

--testing routines
ROUTINE funcname(trw) (expected : arrx(type_name); actual : arrx(type_name))  : BOOLEAN FROM class_name
ROUTINE funcname(test) (expected : arry(type_name)) : BOOLEAN FROM class_name

-- declare namespaced members
-- ****************** 
-- will be in the format <class_name>__<func_name>
-- functions list
%mode push
%mode quote "$"
EVAL(constructor,init)
%defeval def_constructor $%define alias func$
EVAL(desctructor,dsct)
%defeval def_desctructor $%define alias func$
EVAL(full,full)
%defeval def_full $%define alias func$
EVAL(zeros,zero)
%defeval def_zeros $%define alias func$
EVAL(ones,ones)
%defeval def_ones $%define alias func$
EVAL(random,rand)
%defeval def_random $%define alias func$
EVAL(eye,eye)
%defeval def_eye $%define alias func$
EVAL(arr_func,cnst)
%defeval def_arr_func $%define alias func$
EVAL(test_row,trw)
%defeval def_test_row $%define alias func$
EVAL(testing,test)
%defeval def_testing $%define alias func$

%mode pop

-- instantiate
def_constructor
def_desctructor
def_full
def_zeros
def_ones
def_random
def_eye
def_arr_func
def_test_row
def_testing

%endif --end header