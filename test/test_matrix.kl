PROGRAM test_matrix
%NOLOCKGROUP


-- ** TYPES **
%include define_type.m
%define T_CARR10_ t_carr10
%define T_CARR305_ t_carr305

-- types carr10
t_arr2d_ref(10,10,T_CARR10_,REAL,carr10)
--
-- types carr305
t_arr2d_ref(30,5,T_CARR305_,REAL,carr305)
--

-- ** FUNCTIONS **

%include matrix.klh
%from strings.klh %import s_to_rarr
%include kunit.klh

-- class carr10
%class carr10('2dArray.klc','2dArray.klh','carr10.klt')
--
-- class carr305
%class carr305('2dArray.klc','2dArray.klh','carr305.klt')
--

ROUTINE t_zeros1r : BOOLEAN
  VAR
    i : INTEGER
    arr : ARRAY[10] OF REAL
    sol_arr : ARRAY[10] OF REAL
  BEGIN
    FOR i=1 TO ARRAY_LEN(sol_arr) DO
      sol_arr[i] = 0
    ENDFOR

    matrix__zeros_1D(arr)

    RETURN(kunit_eq_arr(sol_arr, arr))
  END t_zeros1r

ROUTINE t_full1r : BOOLEAN
  VAR
    i : INTEGER
    arr : ARRAY[10] OF REAL
    sol_arr : ARRAY[10] OF REAL
    val : REAL
  BEGIN
    val = 4.5

    FOR i=1 TO ARRAY_LEN(sol_arr) DO
      sol_arr[i] = val
    ENDFOR

    matrix__full_1D(arr, val)

    RETURN(kunit_eq_arr(sol_arr, arr))
  END t_full1r

ROUTINE t_eye2r : BOOLEAN
  VAR
    i,j : INTEGER
    arr : ARRAY[3,3] OF REAL
    sol_arr : ARRAY[3,3] OF REAL
    row : ARRAY[3] OF REAL
    sol_row : ARRAY[3] OF REAL
    val : REAL
  BEGIN
    FOR i=1 TO ARRAY_LEN(sol_arr) DO
      FOR j=1 TO ARRAY_LEN(sol_row) DO
        IF i=j THEN
          sol_arr[i,j] = 1
        ELSE
          sol_arr[i,j] = 0
        ENDIF
      ENDFOR
    ENDFOR

    matrix__eye(arr, row)

    RETURN(kunit_eq_2d(sol_row, row, sol_arr, arr))  
  END t_eye2r

ROUTINE t_carr10 : BOOLEAN
  VAR
    sol_arr : arry(T_CARR10_)
    sol_row : arrx(T_CARR10_)
    i,j : INTEGER
    val : REAL
  BEGIN
    val = 100

    FOR i=1 TO ARRAY_LEN(sol_arr) DO
      FOR j=1 TO ARRAY_LEN(sol_row) DO
        sol_row[j] = val
      ENDFOR
      sol_arr[i] = sol_row
    ENDFOR

    carr10__full(val)

    RETURN( carr10__testing (sol_arr) )

  END t_carr10

ROUTINE t_carr305 : BOOLEAN
  VAR
    sol_arr : arry(T_CARR305_) 
    sol_row : arrx(T_CARR305_)
    i,j : INTEGER
    val : REAL
  BEGIN
    val = 100

    FOR i=1 TO ARRAY_LEN(sol_arr) DO
      FOR j=1 TO ARRAY_LEN(sol_row) DO
        sol_row[j] = val
      ENDFOR
      sol_arr[i] = sol_row
    ENDFOR

    carr305__full(val)

    RETURN( carr305__testing (sol_arr) )

  END t_carr305

ROUTINE t_linspace : BOOLEAN
  VAR
    arr, sol_arr, arr2, sol_arr2 : ARRAY[5] OF REAL
  BEGIN
    --with endpoint
    s_to_rarr('2,2.25,2.5,2.75,3',',', sol_arr)

    matrix__linspace(2,3,arr,TRUE)
    --without endpoint
    s_to_rarr('2,2.2,2.4,2.6,2.8',',', sol_arr2)

    matrix__linspace(2,3,arr2,FALSE)

    RETURN(kunit_eq_arr(sol_arr, arr) AND &
           kunit_eq_arr(sol_arr2, arr2) )
  END t_linspace

ROUTINE t_ops_1r : BOOLEAN
  VAR
    arr1, arr2 : ARRAY[5] OF REAL
    op_arr1, op_arr2, op_arr3, op_arr4 : ARRAY[5] OF REAL
    sol_arr1, sol_arr2, sol_arr3, sol_arr4 : ARRAY[5] OF REAL
  BEGIN
    --init arr1
    s_to_rarr('3,10,-90,30.25,-30',',', arr1)
    --init arr2
    s_to_rarr('2,0.5,90,360,0',',', arr2)

    --add solution
    s_to_rarr('5,10.5,0,390.25,-30',',', sol_arr1)
    --subtract solution
    s_to_rarr('1,9.5,-180,-329.75,-30',',', sol_arr2)
    --multiply solution
    s_to_rarr('6,5,-8100,10890,0',',', sol_arr3)
    --divide solution
    s_to_rarr('1.5,20,-1,0.0841,-30',',', sol_arr4)

    --run operations
    matrix__add_1D(arr1, arr2, op_arr1)
    matrix__sub_1D(arr1, arr2, op_arr2)
    matrix__mul_1D(arr1, arr2, op_arr3)
    matrix__div_1D(arr1, arr2, op_arr4)

    RETURN(kunit_eq_arr(sol_arr1, op_arr1) AND kunit_eq_arr(sol_arr2, op_arr2) AND &
           kunit_eq_arr(sol_arr3, op_arr3) AND kunit_eq_arr(sol_arr4, op_arr4))

  END t_ops_1r

BEGIN
  kunit_test('test_zeros_1d()', t_zeros1r)
  kunit_test('test_full_1d()', t_full1r)
  kunit_test('test_eye()', t_eye2r)
  kunit_test('test_full_carr10()', t_carr10)
  kunit_test('test_full_carr305()', t_carr305)
  kunit_test('test linear space', t_linspace)
  kunit_test('test +/-/*// 1D rarrs', t_ops_1r)

  kunit_done
END test_matrix
