PROGRAM test_matrix
%NOLOCKGROUP


-- ** TYPES **
%include define_type.m

%define TYPE_CARR10 t_carr10
%include carr10.klt
t_arr2d_ref(t_rows,t_columns,TYPE_CARR10,inner_type)

%define TYPE_CARR305 t_carr305
%include carr305.klt
t_arr2d_ref(t_rows,t_columns,TYPE_CARR305,inner_type)

%define TYPE_CARR23 t_carr23
%include carr23.klt
t_arr2d_ref(t_rows,t_columns,TYPE_CARR23,inner_type)

-- ** FUNCTIONS **

%include matrix.klh
%include strings.klh
%include kunit.klh

-- class carr10
%class carr10('2dArray.klc','2dArray.klh','carr10.klt')
-- class carr305
%class carr305('2dArray.klc','2dArray.klh','carr305.klt')
-- class carr23
%class carr23('2dArray.klc','2dArray.klh','carr23.klt')
-- class for 2nd carr23
%class carr232('2dArray.klc','2dArray.klh','carr23.klt')

ROUTINE t_zeros1r : BOOLEAN
  VAR
    i : INTEGER
    arr : ARRAY[10] OF REAL
    sol_arr : ARRAY[10] OF REAL
  BEGIN
    FOR i=1 TO ARRAY_LEN(sol_arr) DO
      sol_arr[i] = 0
    ENDFOR

    matrix__zeros_1D(arr)

    RETURN(kunit_eq_arr(sol_arr, arr))
  END t_zeros1r

ROUTINE t_full1r : BOOLEAN
  VAR
    i : INTEGER
    arr : ARRAY[10] OF REAL
    sol_arr : ARRAY[10] OF REAL
    val : REAL
  BEGIN
    val = 4.5

    FOR i=1 TO ARRAY_LEN(sol_arr) DO
      sol_arr[i] = val
    ENDFOR

    matrix__full_1D(arr, val)

    RETURN(kunit_eq_arr(sol_arr, arr))
  END t_full1r

ROUTINE t_eye2r : BOOLEAN
  VAR
    i,j : INTEGER
    arr : ARRAY[3,3] OF REAL
    sol_arr : ARRAY[3,3] OF REAL
    row : ARRAY[3] OF REAL
    sol_row : ARRAY[3] OF REAL
    val : REAL
  BEGIN
    FOR i=1 TO ARRAY_LEN(sol_arr) DO
      FOR j=1 TO ARRAY_LEN(sol_row) DO
        IF i=j THEN
          sol_arr[i,j] = 1
        ELSE
          sol_arr[i,j] = 0
        ENDIF
      ENDFOR
    ENDFOR

    matrix__eye(arr, row)

    RETURN(kunit_eq_2d(sol_row, row, sol_arr, arr))  
  END t_eye2r

ROUTINE t_carr10 : BOOLEAN
  VAR
    act_arr : arry(TYPE_CARR10)
    sol_arr : arry(TYPE_CARR10)
    sol_row : arrx(TYPE_CARR10)
    i,j : INTEGER
    val : REAL
  BEGIN
    val = 100

    FOR i=1 TO ARRAY_LEN(sol_arr) DO
      FOR j=1 TO ARRAY_LEN(sol_row) DO
        sol_row[j] = val
      ENDFOR
      sol_arr[i] = sol_row
    ENDFOR

    act_arr = carr10__full(val)

    RETURN( carr10__testing(sol_arr, act_arr) )

  END t_carr10

ROUTINE t_2dadd : BOOLEAN
  VAR
    sol_arr : arry(TYPE_CARR23)
    act_arr : arry(TYPE_CARR23)
    arr1 : arry(TYPE_CARR23)
    arr2 : arry(TYPE_CARR23)
  BEGIN
    arr1 = carr23__create_array_from_string('1,2,4;2,6,0', ',', ';')
    arr2 = carr232__create_array_from_string('4,1,4;0,-1,3', ',', ';')

    -- expected array
    sol_arr[1] = carr23__create_row_from_string('5,3,8',',')
    sol_arr[2] = carr23__create_row_from_string('2,5,3',',')

    act_arr = carr23__add(arr1, arr2)

    RETURN( carr23__testing(sol_arr, act_arr) )

  END t_2dadd

ROUTINE t_carr305 : BOOLEAN
  VAR
    act_arr : arry(TYPE_CARR305)
    sol_arr : arry(TYPE_CARR305) 
    sol_row : arrx(TYPE_CARR305)
    i,j : INTEGER
    val : REAL
  BEGIN
    val = 100

    FOR i=1 TO ARRAY_LEN(sol_arr) DO
      FOR j=1 TO ARRAY_LEN(sol_row) DO
        sol_row[j] = val
      ENDFOR
      sol_arr[i] = sol_row
    ENDFOR

    act_arr = carr305__full(val)

    RETURN( carr305__testing(sol_arr, act_arr) )

  END t_carr305

ROUTINE t_linspace : BOOLEAN
  VAR
    arr, sol_arr, arr2, sol_arr2 : ARRAY[5] OF REAL
  BEGIN
    --with endpoint
    s_to_rarr('2,2.25,2.5,2.75,3',',', sol_arr)

    matrix__linspace(2,3,arr,TRUE)
    --without endpoint
    s_to_rarr('2,2.2,2.4,2.6,2.8',',', sol_arr2)

    matrix__linspace(2,3,arr2,FALSE)

    RETURN(kunit_eq_arr(sol_arr, arr) AND &
           kunit_eq_arr(sol_arr2, arr2) )
  END t_linspace

ROUTINE t_ops_1r : BOOLEAN
  VAR
    arr1, arr2 : ARRAY[5] OF REAL
    op_arr1, op_arr2, op_arr3, op_arr4 : ARRAY[5] OF REAL
    sol_arr1, sol_arr2, sol_arr3, sol_arr4 : ARRAY[5] OF REAL
  BEGIN
    --init arr1
    s_to_rarr('3,10,-90,30.25,-30',',', arr1)
    --init arr2
    s_to_rarr('2,0.5,90,360,0',',', arr2)

    --add solution
    s_to_rarr('5,10.5,0,390.25,-30',',', sol_arr1)
    --subtract solution
    s_to_rarr('1,9.5,-180,-329.75,-30',',', sol_arr2)
    --multiply solution
    s_to_rarr('6,5,-8100,10890,0',',', sol_arr3)
    --divide solution
    s_to_rarr('1.5,20,-1,0.0841,-30',',', sol_arr4)

    --run operations
    matrix__add_1D(arr1, arr2, op_arr1)
    matrix__sub_1D(arr1, arr2, op_arr2)
    matrix__mul_1D(arr1, arr2, op_arr3)
    matrix__div_1D(arr1, arr2, op_arr4)

    RETURN(kunit_eq_arr(sol_arr1, op_arr1) AND kunit_eq_arr(sol_arr2, op_arr2) AND &
           kunit_eq_arr(sol_arr3, op_arr3) AND kunit_eq_arr(sol_arr4, op_arr4))

  END t_ops_1r

ROUTINE t_shift : BOOLEAN
  VAR
    arr : ARRAY[5] OF REAL
    uninit_s, uninit_s2 : ARRAY[5] OF REAL
    expected1, expected2 : ARRAY[5] OF REAL
    b : ARRAY[2] OF BOOLEAN
  BEGIN
    s_to_rarr('1,2,3,4,5',',', arr)

    matrix__shift_r(arr, 2, TRUE, uninit_s)
    s_to_rarr('4,5,1,2,3',',', expected1)
    b[1] = kunit_eq_arr(expected1, arr)

    matrix__shift_r(arr, 3, FALSE, uninit_s2)
    s_to_rarr('2,3,4,5,1',',', expected2)
    b[2] = kunit_eq_arr(expected2, arr)

    RETURN(b[1] AND b[2])
  
  END t_shift

BEGIN
  --asserts 55
  kunit_test('test_zeros_1d()', t_zeros1r) -- assert 1
  kunit_test('test_full_1d()', t_full1r) -- assert 1
  kunit_test('test_eye()', t_eye2r) --assert 1
  kunit_test('test_full_carr10()', t_carr10) --assert 11
  kunit_test('test_full_carr305()', t_carr305) --assert 31
  kunit_test('test linear space', t_linspace) --assert 2
  kunit_test('test ops on 1D rarrs', t_ops_1r) --assert 4
  kunit_test('test 2d add', t_2dadd) --assert 2
  kunit_test('shift matrix', t_shift) --assert 2

  kunit_done
END test_matrix
