PROGRAM matrix
%NOBUSYLAMP
%COMMENT = 'matrix library'
%NOLOCKGROUP
%NOPAUSE = COMMAND + TPENABLE + ERROR

%include matrix.klt

%include matrix.klh
%include math.klh

-- public :

ROUTINE matrix__full_1D
  BEGIN
    matrix__init_1D(arr, OP_FULL, number)
  END matrix__full_1D

ROUTINE matrix__full_2D
  BEGIN
    matrix__init_2D(arr, row, OP_FULL, number)
  END matrix__full_2D

ROUTINE matrix__random_1D
  BEGIN
    matrix__init_1D(arr, OP_RANDOM, 0)
  END matrix__random_1D

ROUTINE matrix__random_2D
  BEGIN
    matrix__init_2D(arr, row, OP_RANDOM, 0)
  END matrix__random_2D

ROUTINE matrix__zeros_1D
  BEGIN
    matrix__init_1D(arr, OP_ZEROS, 0)
  END matrix__zeros_1D

ROUTINE matrix__zeros_2D
  BEGIN
    matrix__init_2D(arr, row, OP_ZEROS, 0)
  END matrix__zeros_2D

ROUTINE matrix__ones_1D
  BEGIN
    matrix__init_1D(arr, OP_ONES, 0)
  END matrix__ones_1D

ROUTINE matrix__ones_2D
  BEGIN
    matrix__init_2D(arr, row, OP_ONES, 0)
  END matrix__ones_2D

ROUTINE matrix__eye
  BEGIN
    matrix__init_2D(arr, row, OP_EYE, 0)
  END matrix__eye

ROUTINE matrix__linspace
  VAR
    i : INTEGER
  BEGIN
    FOR i=1 TO ARRAY_LEN(arr) DO
      IF endpoint THEN
        arr[i] = ((stop_idx-start_idx)/(ARRAY_LEN(arr)-1)*(i-1)) + start_idx
      ELSE
        arr[i] = ((stop_idx-start_idx)/(ARRAY_LEN(arr))*(i-1)) + start_idx
      ENDIF
    ENDFOR
  END matrix__linspace

-- private :
ROUTINE matrix__init_1D
  VAR
    i : INTEGER
    tme  : INTEGER
  BEGIN
    FOR i=1 TO ARRAY_LEN(arr) DO
        SELECT opts OF
          CASE (OP_ZEROS) :
            arr[i] = 0.0
          CASE (OP_FULL) :
            arr[i] = val
          CASE (OP_RANDOM) :
            GET_TIME(tme)
            SRAND(tme*i)
            arr[i] = RAND
          CASE (OP_ONES) :
            arr[i] = 1.0
        ENDSELECT
    ENDFOR
  END matrix__init_1D

-- private :
ROUTINE matrix__init_2D
  VAR
    i,j : INTEGER
    tme  : INTEGER
    rrand : REAL
  BEGIN
    FOR i=1 TO ARRAY_LEN(arr) DO
      FOR j=1 TO ARRAY_LEN(row) DO
        SELECT opts OF
          CASE (OP_ZEROS) :
            arr[i,j] = 0.0
          CASE (OP_EYE) :
            IF (i=j) THEN
              arr[i,j] = 1.0
            ELSE
              arr[i,j] = 0.0
            ENDIF
          CASE (OP_FULL) :
            arr[i,j] = val
          CASE (OP_RANDOM) :
            GET_TIME(tme)
            SRAND(tme*i*j)
            rrand = RAND
            arr[i,j] = rrand
          CASE (OP_ONES) :
            arr[i,j] = 1.0
        ENDSELECT
      ENDFOR
    ENDFOR
  END matrix__init_2D

BEGIN
END matrix
