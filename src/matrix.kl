PROGRAM matrix
%NOBUSYLAMP
%COMMENT = 'matrix library'
%NOLOCKGROUP
%NOPAUSE = COMMAND + TPENABLE + ERROR

%include errors.klt
%include matrix.klt

%include errors.klh
%from math.klh %import srand, rand
%include matrix.klh
%include matrix.private.klh

-- public :

ROUTINE matrix__full_1D
  BEGIN
    matrix__init_1D(arr, OP_FULL, number)
  END matrix__full_1D

ROUTINE matrix__full_2D
  BEGIN
    matrix__init_2D(arr, row, OP_FULL, number)
  END matrix__full_2D

ROUTINE matrix__random_1D
  BEGIN
    matrix__init_1D(arr, OP_RANDOM, 0)
  END matrix__random_1D

ROUTINE matrix__random_2D
  BEGIN
    matrix__init_2D(arr, row, OP_RANDOM, 0)
  END matrix__random_2D

ROUTINE matrix__zeros_1D
  BEGIN
    matrix__init_1D(arr, OP_ZEROS, 0)
  END matrix__zeros_1D

ROUTINE matrix__zeros_2D
  BEGIN
    matrix__init_2D(arr, row, OP_ZEROS, 0)
  END matrix__zeros_2D

ROUTINE matrix__ones_1D
  BEGIN
    matrix__init_1D(arr, OP_ONES, 0)
  END matrix__ones_1D

ROUTINE matrix__ones_2D
  BEGIN
    matrix__init_2D(arr, row, OP_ONES, 0)
  END matrix__ones_2D

ROUTINE matrix__eye
  BEGIN
    matrix__init_2D(arr, row, OP_EYE, 0)
  END matrix__eye

ROUTINE matrix__linspace
  VAR
    i : INTEGER
  BEGIN
    FOR i=1 TO ARRAY_LEN(arr) DO
      IF endpoint THEN
        arr[i] = ((stop_idx-start_idx)/(ARRAY_LEN(arr)-1)*(i-1)) + start_idx
      ELSE
        arr[i] = ((stop_idx-start_idx)/(ARRAY_LEN(arr))*(i-1)) + start_idx
      ENDIF
    ENDFOR
  END matrix__linspace

ROUTINE matrix__add_1D
  BEGIN
    matrix__operations_1D(arr1, arr2, OP_ADD, out_arr)
  END matrix__add_1D

ROUTINE matrix__sub_1D
  BEGIN
    matrix__operations_1D(arr1, arr2, OP_SUBTRACT, out_arr)
  END matrix__sub_1D

ROUTINE matrix__mul_1D
  BEGIN
    matrix__operations_1D(arr1, arr2, OP_MULTIPLY, out_arr)
  END matrix__mul_1D

ROUTINE matrix__div_1D
  BEGIN
    matrix__operations_1D(arr1, arr2, OP_DIVIDE, out_arr)
  END matrix__div_1D

-- private :

ROUTINE matrix__operations_1D
  VAR
    i : INTEGER
  BEGIN
    IF ARRAY_LEN(arr1) <> ARRAY_LEN(arr2) THEN
      karelError(ARR_LEN_MISMATCH, 'add_1D: arrays are not the same size', ER_ABORT)
    ENDIF

    IF ARRAY_LEN(out_arr) <> ARRAY_LEN(arr1) THEN
      karelError(ARR_LEN_MISMATCH, 'add_1D: output array is not the same size as input array', ER_WARN)
    ENDIF

    FOR i=1 TO ARRAY_LEN(out_arr) DO
      IF (i <= ARRAY_LEN(arr1)) AND NOT (UNINIT(arr1[i]) AND UNINIT(arr2[i])) THEN
        IF UNINIT(arr2[i]) THEN
          out_arr[i] = arr1[i]
        ELSE IF UNINIT(arr1[i]) THEN
          out_arr[i] = arr1[i]
        ELSE
          SELECT opts OF
            CASE (OP_ADD) :
              out_arr[i] = arr1[i] + arr2[i]
            CASE (OP_SUBTRACT) :
              out_arr[i] = arr1[i] - arr2[i]
            CASE (OP_MULTIPLY) :
              out_arr[i] = arr1[i] * arr2[i]
            CASE (OP_DIVIDE) :
              IF arr2[i] = 0 THEN
                out_arr[i] = arr1[i]
              ELSE
                out_arr[i] = arr1[i] / arr2[i]
              ENDIF
          ENDSELECT
        ENDIF
        ENDIF
      ENDIF
    ENDFOR
  END matrix__operations_1D

ROUTINE matrix__init_1D
  VAR
    i : INTEGER
    tme  : INTEGER
  BEGIN
    FOR i=1 TO ARRAY_LEN(arr) DO
        SELECT opts OF
          CASE (OP_ZEROS) :
            arr[i] = 0.0
          CASE (OP_FULL) :
            arr[i] = val
          CASE (OP_RANDOM) :
            GET_TIME(tme)
            math__srand(tme*i)
            arr[i] = math__rand
          CASE (OP_ONES) :
            arr[i] = 1.0
        ENDSELECT
    ENDFOR
  END matrix__init_1D

ROUTINE matrix__init_2D
  VAR
    i,j : INTEGER
    tme  : INTEGER
    rrand : REAL
  BEGIN
    FOR i=1 TO ARRAY_LEN(arr) DO
      FOR j=1 TO ARRAY_LEN(row) DO
        SELECT opts OF
          CASE (OP_ZEROS) :
            arr[i,j] = 0.0
          CASE (OP_EYE) :
            IF (i=j) THEN
              arr[i,j] = 1.0
            ELSE
              arr[i,j] = 0.0
            ENDIF
          CASE (OP_FULL) :
            arr[i,j] = val
          CASE (OP_RANDOM) :
            GET_TIME(tme)
            math__srand(tme*i*j)
            rrand = math__rand
            arr[i,j] = rrand
          CASE (OP_ONES) :
            arr[i,j] = 1.0
        ENDSELECT
      ENDFOR
    ENDFOR
  END matrix__init_2D

BEGIN
END matrix
