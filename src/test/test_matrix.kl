PROGRAM test_matrix
%NOLOCKGROUP


-- ** TYPES **
%include define_type.m
%define T_CARR10_ t_carr10
%define T_CARR305_ t_carr305

-- types carr10
t_arr2d_ref(10,10,T_CARR10_,REAL,carr10)
--
-- types carr305
t_arr2d_ref(30,5,T_CARR305_,REAL,carr305)
--

-- ** FUNCTIONS **

%include matrix.klh
%include kunit.klh

-- class carr10
%defeval class_name carr10
%defeval type_name T_CARR10_
%include 2dArray.klh
--
-- class carr305
%defeval class_name carr305
%defeval type_name T_CARR305_
%include 2dArray.klh
--

ROUTINE t_zeros1r : BOOLEAN
  VAR
    i : INTEGER
    arr : ARRAY[10] OF REAL
    sol_arr : ARRAY[10] OF REAL
  BEGIN
    FOR i=1 TO ARRAY_LEN(sol_arr) DO
      sol_arr[i] = 0
    ENDFOR

    zeros1r(arr)

    RETURN(kunit_eq_arr(sol_arr, arr))
  END t_zeros1r

ROUTINE t_full1r : BOOLEAN
  VAR
    i : INTEGER
    arr : ARRAY[10] OF REAL
    sol_arr : ARRAY[10] OF REAL
    val : REAL
  BEGIN
    val = 4.5

    FOR i=1 TO ARRAY_LEN(sol_arr) DO
      sol_arr[i] = val
    ENDFOR

    full1r(arr, val)

    RETURN(kunit_eq_arr(sol_arr, arr))
  END t_full1r

ROUTINE t_eye2r : BOOLEAN
  VAR
    i,j : INTEGER
    arr : ARRAY[3,3] OF REAL
    sol_arr : ARRAY[3,3] OF REAL
    row : ARRAY[3] OF REAL
    sol_row : ARRAY[3] OF REAL
    val : REAL
  BEGIN
    FOR i=1 TO ARRAY_LEN(sol_arr) DO
      FOR j=1 TO ARRAY_LEN(sol_row) DO
        IF i=j THEN
          sol_arr[i,j] = 1
        ELSE
          sol_arr[i,j] = 0
        ENDIF
      ENDFOR
    ENDFOR

    eye2R(arr, row)

    RETURN(kunit_eq_2d(sol_row, row, sol_arr, arr))  
  END t_eye2r

ROUTINE t_carr10 : BOOLEAN
  VAR
    sol_arr : arry(T_CARR10_)
    sol_row : arrx(T_CARR10_)
    i,j : INTEGER
    val : REAL
  BEGIN
    val = 100

    FOR i=1 TO ARRAY_LEN(sol_arr) DO
      FOR j=1 TO ARRAY_LEN(sol_row) DO
        sol_row[j] = val
      ENDFOR
      sol_arr[i] = sol_row
    ENDFOR

    carr10__full(val)

    RETURN( carr10__testing (sol_arr) )

  END t_carr10

ROUTINE t_carr305 : BOOLEAN
  VAR
    sol_arr : arry(T_CARR305_) 
    sol_row : arrx(T_CARR305_)
    i,j : INTEGER
    val : REAL
  BEGIN
    val = 100

    FOR i=1 TO ARRAY_LEN(sol_arr) DO
      FOR j=1 TO ARRAY_LEN(sol_row) DO
        sol_row[j] = val
      ENDFOR
      sol_arr[i] = sol_row
    ENDFOR

    carr305__full(val)

    RETURN( carr305__testing (sol_arr) )

  END t_carr305

BEGIN
  kunit_test('test_zeros_1d()', t_zeros1r)
  kunit_test('test_full_1d()', t_full1r)
  kunit_test('test_eye()', t_eye2r)
  kunit_test('test_full_carr10()', t_carr10)
  kunit_test('test_full_carr305()', t_carr305)

  kunit_done
END test_matrix
